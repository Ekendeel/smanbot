
from aiogram import Bot, Dispatcher, F
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardButton, InlineKeyboardMarkup, CallbackQuery
from aiogram.enums import ParseMode
from aiogram.fsm.storage.memory import MemoryStorage
import asyncio
import logging
import os

TOKEN = os.getenv("TOKEN")
bot = Bot(token=TOKEN, parse_mode=ParseMode.HTML)
dp = Dispatcher(storage=MemoryStorage())

main_menu = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üõç –ö–∞—Ç–∞–ª–æ–≥"), KeyboardButton(text="üõí –ö–æ—Ä–∑–∏–Ω–∞")],
        [KeyboardButton(text="üë§ –ü—Ä–æ—Ñ–∏–ª—å")],
    ],
    resize_keyboard=True
)

catalog_page_0 = InlineKeyboardMarkup(
    inline_keyboard=[
        [InlineKeyboardButton(text="–°–º–∞—Ä—Ç—Ñ–æ–Ω—ã", callback_data="sub_–°–º–∞—Ä—Ç—Ñ–æ–Ω—ã")],
        [InlineKeyboardButton(text="–°–º–∞—Ä—Ç-—á–∞—Å—ã", callback_data="sub_–°–º–∞—Ä—Ç-—á–∞—Å—ã")],
        [InlineKeyboardButton(text="–ù–∞—É—à–Ω–∏–∫–∏", callback_data="sub_–ù–∞—É—à–Ω–∏–∫–∏")],
        [InlineKeyboardButton(text="–ù–æ—É—Ç–±—É–∫–∏", callback_data="sub_–ù–æ—É—Ç–±—É–∫–∏")],
        [InlineKeyboardButton(text="–§–æ—Ç–æ–∞–ø–ø–∞—Ä–∞—Ç—ã", callback_data="sub_–§–æ—Ç–æ–∞–ø–ø–∞—Ä–∞—Ç—ã")],
        [InlineKeyboardButton(text="–ò–≥—Ä–æ–≤—ã–µ –ø—Ä–∏—Å—Ç–∞–≤–∫–∏", callback_data="sub_–ò–≥—Ä–æ–≤—ã–µ –ø—Ä–∏—Å—Ç–∞–≤–∫–∏")],
        [InlineKeyboardButton(text="–ü—Ä–∏–Ω—Ç–µ—Ä—ã", callback_data="sub_–ü—Ä–∏–Ω—Ç–µ—Ä—ã")],
        [InlineKeyboardButton(text="–ö–≤–∞–¥—Ä–æ–∫–æ–ø—Ç–µ—Ä—ã", callback_data="sub_–ö–≤–∞–¥—Ä–æ–∫–æ–ø—Ç–µ—Ä—ã")],
        [InlineKeyboardButton(text="–£–º–Ω—ã–π –¥–æ–º", callback_data="sub_–£–º–Ω—ã–π –¥–æ–º")],
        [InlineKeyboardButton(text="–¢–µ–ª–µ–≤–∏–∑–æ—Ä—ã", callback_data="sub_–¢–µ–ª–µ–≤–∏–∑–æ—Ä—ã")],
    ]
)

@dp.message(F.text.in_({'/start', 'start'}))
async def start(message: Message):
    await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ SMANSHOP üëã\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:", reply_markup=main_menu)

@dp.message(F.text == "üõç –ö–∞—Ç–∞–ª–æ–≥")
async def show_catalog(message: Message):
    await message.answer("üì¶ –≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞ ‚Äî –≤—ã–±–µ—Ä–∏ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=catalog_page_0)

@dp.callback_query(F.data.startswith("sub_"))
async def subcategory_callback(callback: CallbackQuery):
    subcat = callback.data[4:]
    await callback.message.answer(f"üìÇ –ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è: <b>{subcat}</b>")

@dp.message(F.text == "üõí –ö–æ—Ä–∑–∏–Ω–∞")
async def show_cart(message: Message):
    await message.answer("üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞.")

@dp.message(F.text == "üë§ –ü—Ä–æ—Ñ–∏–ª—å")
async def show_profile(message: Message):
    await message.answer(f"üë§ –ü—Ä–æ—Ñ–∏–ª—å:\n–ò–º—è: {message.from_user.full_name}\nID: {message.from_user.id}")

async def main():
    logging.basicConfig(level=logging.INFO)
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
